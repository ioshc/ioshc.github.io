<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>markdown基本语法</title>
      <link href="/2018/07/31/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/07/31/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="1-‘-‘标题-类-Setext-形式"><a href="#1-‘-‘标题-类-Setext-形式" class="headerlink" title="1. ‘=/-‘标题 (类 Setext 形式)"></a>1. ‘=/-‘标题 (类 Setext 形式)</h3><h1 id="Setext-1级标题"><a href="#Setext-1级标题" class="headerlink" title="Setext 1级标题"></a>Setext 1级标题</h1><h2 id="Setext-2级标题"><a href="#Setext-2级标题" class="headerlink" title="Setext 2级标题"></a>Setext 2级标题</h2><blockquote><p>类 Setext 形式是用底线的形式，利用 <strong>等号(=)</strong> （最高阶标题）和 <strong>减号(-)</strong> （第二阶标题）<br>  任何数量的 <strong>=</strong> 和 <strong>-</strong> 都可以有效果。  </p><pre><code>This is an H1=============This is an H2-------------</code></pre></blockquote><h3 id="2-‘-’标题-类-Atx-形式"><a href="#2-‘-’标题-类-Atx-形式" class="headerlink" title="2. ‘#’标题 (类 Atx 形式)"></a>2. ‘#’标题 (类 Atx 形式)</h3><h1 id="Atx-1级标题"><a href="#Atx-1级标题" class="headerlink" title="Atx 1级标题"></a>Atx 1级标题</h1><h2 id="Atx-2级标题"><a href="#Atx-2级标题" class="headerlink" title="Atx 2级标题"></a>Atx 2级标题</h2><h3 id="Atx-3级标题"><a href="#Atx-3级标题" class="headerlink" title="Atx 3级标题"></a>Atx 3级标题</h3><h4 id="Atx-4级标题"><a href="#Atx-4级标题" class="headerlink" title="Atx 4级标题"></a>Atx 4级标题</h4><h5 id="Atx-5级标题"><a href="#Atx-5级标题" class="headerlink" title="Atx 5级标题"></a>Atx 5级标题</h5><h6 id="Atx-6级标题"><a href="#Atx-6级标题" class="headerlink" title="Atx 6级标题"></a>Atx 6级标题</h6><blockquote><p>类 Atx 形式则是在行首插入 1～6 个 <strong>#</strong> ，对应到标题 1～6 阶  </p><pre><code>非闭合方式：# 这是 H1## 这是 H2###### 这是 H6闭合方式（首尾对称）：# 这是 H1 ### 这是 H2 ######## 这是 H6 ######     </code></pre></blockquote><h3 id="3-斜体"><a href="#3-斜体" class="headerlink" title="3. 斜体"></a>3. 斜体</h3><ul><li><em>1个星号</em></li><li><em>1个下划线</em></li></ul><blockquote><p>首尾用 1 个 <strong>星号( * )</strong> 或者 <strong>下划线( _ )</strong> 包含一段文本</p><pre><code>*身正不怕影子斜*_身正不怕影子斜_</code></pre></blockquote><h3 id="4-粗体"><a href="#4-粗体" class="headerlink" title="4. 粗体"></a>4. 粗体</h3><ul><li><strong>2个星号</strong></li><li><strong>2个下划线</strong></li></ul><blockquote><p>首尾用 2 个 <strong>星号( * )</strong> 或者 <strong>下划线( _ )</strong> 包含一段文本</p><pre><code>**粗不粗**__粗不粗__</code></pre></blockquote><h3 id="5-无序列表"><a href="#5-无序列表" class="headerlink" title="5. 无序列表"></a>5. 无序列表</h3><ul><li>无序列表1</li></ul><ul><li>无序列表2</li></ul><ul><li>无序列表3  </li></ul><blockquote><p>无序列表使用 <strong>星号( * )</strong> 、<strong>加号( + )</strong> 或是 <strong>减号( - )</strong> 作为列表标记</p><pre><code>*   Red*   Green*   Blue等同于：+   Red+   Green+   Blue也等同于：-   Red-   Green-   Blue</code></pre></blockquote><h3 id="6-有序列表"><a href="#6-有序列表" class="headerlink" title="6. 有序列表"></a>6. 有序列表</h3><ol><li>有序立标1</li><li>有序列表2</li><li>有序列表3</li></ol><blockquote><p>有序列表则使用数字接着一个英文句点：<strong>“1.”</strong> <strong>“2.”</strong> <strong>“3.”</strong></p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre></blockquote><h3 id="7-链接"><a href="#7-链接" class="headerlink" title="7. 链接"></a>7. 链接</h3><p><a href="http://www.markdown.cn" target="_blank" rel="external">Markdown</a></p><blockquote><p>格式：[链接显示的文字](URL地址)</p><pre><code>例如：[Markdown](http://www.markdown.cn)</code></pre></blockquote><h3 id="8-图片"><a href="#8-图片" class="headerlink" title="8. 图片"></a>8. 图片</h3><p><img src="https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=a4e83ab404d79123f4ed9c26cc5d32e7/7c1ed21b0ef41bd5c306824859da81cb39db3d30.jpg" alt="我是一张图片"></p><blockquote><p>格式：![图片的替代文字](图片地址 “可选文字”)</p><pre><code>例如：![](https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=79cf53f2074f78f0800b9df5410a6d68/00e93901213fb80ef9ceac7132d12f2eb938947d.jpg)</code></pre></blockquote><h3 id="9-引用（Blockquote）"><a href="#9-引用（Blockquote）" class="headerlink" title="9.引用（Blockquote）"></a>9.引用（Blockquote）</h3><h5 id="普通区块引用"><a href="#普通区块引用" class="headerlink" title="普通区块引用"></a>普通区块引用</h5><blockquote><p>别人笑我太疯癫<br>  我笑他人看不穿<br>  不见武林豪杰墓<br>  无花无酒锄作田  </p></blockquote><pre><code>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式，自己先断好行，然后在每行的最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.  Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><h5 id="区块引用可以嵌套（引用内引用）"><a href="#区块引用可以嵌套（引用内引用）" class="headerlink" title="区块引用可以嵌套（引用内引用）"></a>区块引用可以嵌套（引用内引用）</h5><blockquote><p>别人笑我太疯癫，<br>  我笑他人看不穿，<br>  不见武林豪杰墓，<br>  无花无酒锄作田</p><blockquote><p>你是唐伯虎？</p></blockquote><p>哇呀呀呀呀~，好！实不相瞒，小弟我就是人称玉树临风胜潘安，一朵梨花压海棠的小淫虫周伯通！</p></blockquote><pre><code>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><h5 id="区块内使用其他的-Markdown-语法"><a href="#区块内使用其他的-Markdown-语法" class="headerlink" title="区块内使用其他的 Markdown 语法"></a>区块内使用其他的 Markdown 语法</h5><blockquote><h6 id="我是被块引用的标题。"><a href="#我是被块引用的标题。" class="headerlink" title="我是被块引用的标题。"></a>我是被块引用的标题。</h6><ol><li>我是被块引用的列表1。</li><li>我是被块引用的列表2。</li></ol><p>什么？块引用还能引用代码：</p><pre><code>void blockquoteFunction() { printf &quot;我就是被块引用的代码&quot;;}</code></pre></blockquote><pre><code>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：&gt; ## 这是一个标题。&gt; &gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><h3 id="10-代码"><a href="#10-代码" class="headerlink" title="10. 代码"></a>10. 代码</h3><h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><p>一个简单的函数：<code>void main() { print &quot;Hello, markdown!&quot;; }</code>，在同一行就可以写完</p><blockquote><p>如果要标记一小段行内代码，你可以用 <strong>反引号( ` )</strong> 把它包起来  </p><pre><code>一个简单的函数：`void main() { print &quot;Hello, markdown!&quot;; }`，在同一行就可以写完</code></pre></blockquote><h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><blockquote><p>如果要标记多行代码，你可以用3个 <strong>反引号( ` )</strong> 来开启和结束代码区段  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void main() &#123;</div><div class="line">print &quot;Hello, markdown!&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></blockquote><h4 id="方式3"><a href="#方式3" class="headerlink" title="方式3"></a>方式3</h4><blockquote><p>使用 1 个制表符建立代码区块  </p><pre><code>void main() {    print &quot;Hello, markdown!&quot;;}</code></pre></blockquote><h4 id="方式4"><a href="#方式4" class="headerlink" title="方式4"></a>方式4</h4><blockquote><p>缩进 4 个空格建立代码区块</p><pre><code>void main() {    print &quot;Hello, markdown!&quot;;}</code></pre></blockquote><h3 id="11-表格"><a href="#11-表格" class="headerlink" title="11. 表格"></a>11. 表格</h3><p>最常见的Markdown格式选项和键盘快捷键(引用自百度百科)</p><table><thead><tr><th>输出后的效果</th><th style="text-align:center">Markdown</th><th style="text-align:right">快捷键</th></tr></thead><tbody><tr><td>Bold</td><td style="text-align:center"><strong>text</strong></td><td style="text-align:right">Ctrl/⌘ + B</td></tr><tr><td>Emphasize</td><td style="text-align:center"><em>text</em></td><td style="text-align:right">Ctrl/⌘ + I</td></tr><tr><td>Link</td><td style="text-align:center">[title](http://)</td><td style="text-align:right">Ctrl/⌘ + K</td></tr><tr><td>Inline Code</td><td style="text-align:center"><code>code</code></td><td style="text-align:right">Ctrl/⌘ + Shift + K</td></tr><tr><td>Image</td><td style="text-align:center">![alt](http://)</td><td style="text-align:right">Ctrl/⌘ + Shift + I</td></tr><tr><td>List</td><td style="text-align:center">* item</td><td style="text-align:right">Ctrl + L</td></tr><tr><td>Blockquote</td><td style="text-align:center">&gt; quote</td><td style="text-align:right">Ctrl + Q</td></tr><tr><td>H1</td><td style="text-align:center"># Heading</td><td style="text-align:right"></td></tr><tr><td>H2</td><td style="text-align:center">## Heading</td><td style="text-align:right">Ctrl/⌘ + H</td></tr><tr><td>H3</td><td style="text-align:center">### Heading</td><td style="text-align:right">Ctrl/⌘ + H (x2)</td></tr></tbody></table><blockquote><p>表格格式如下，用 &gt;=3 个 <strong>减号( - )</strong> 分割表头和内容，每一列用 <strong>或( | )</strong> 分割。<br>  默认居左，居中在分割线 <strong>( — )</strong> 两边加上 <strong>英文冒号( : )</strong>，居右在分割线 <strong>( — )</strong> 右边加上 <strong>英文冒号( : )</strong></p><pre><code>表头1     | 表头2           | 表头3---      | :-------------: | ----:默认居左   | 居中 :---:      | 居右 ---:居左 :--- | 居中 :---:      | 居右 ---:</code></pre></blockquote><h3 id="12-转义符-反斜杠"><a href="#12-转义符-反斜杠" class="headerlink" title="12. 转义符 反斜杠( \ )"></a>12. 转义符 <strong>反斜杠( \ )</strong></h3><blockquote><p>Markdown支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜杠`   反引号*   星号_   下划线{}  花括号[]  方括号()  括弧#   井号+   加号-   减号.   英文句点!   感叹号</code></pre></blockquote><h3 id="13-分隔线"><a href="#13-分隔线" class="headerlink" title="13. 分隔线"></a>13. 分隔线</h3><p>我是一个快乐的句子，我下面有好多线。</p><hr><hr><hr><hr><hr><blockquote><p>用三个以上的 <strong>星号( * )</strong>、<strong>加号( + )</strong> 或是 <strong>下划线( _ )</strong> 来建立一个分隔线。  </p><pre><code>行内不能有其他内容，你也可以在星号或是减号中间插入空格，下面每种写法都可以建立分隔线：**** * *******_ _ _______</code></pre></blockquote>]]></content>
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS代码规范</title>
      <link href="/2017/07/25/iOS%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>/2017/07/25/iOS%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h2 id="一-XCode设置"><a href="#一-XCode设置" class="headerlink" title="一. XCode设置"></a>一. XCode设置</h2><ol><li>使用空格而不是制表符 <code>Tab</code>，不要在工程里使用 <code>Tab</code> 键，使用空格来进行缩进。<br> 在 <code>Xcode &gt; Preferences &gt; Text Editing</code> 将 <code>Tab</code> 和自动缩进都设置为 4 个空格。  </li><li>同样的，在 <code>Xcode &gt; Preferences &gt; Text Editing &gt; Page guide at column</code>: 中将最大行长设置为 100 ，过长的一行代码将会导致可读性问题。</li></ol><h2 id="二-整体风格："><a href="#二-整体风格：" class="headerlink" title="二.整体风格："></a>二.整体风格：</h2><ol><li>前缀：解决<code>OC</code>没有命名空间的问题。命名类、协议、常量、枚举、宏定义和<code>typedef</code>结构体时使用前缀</li><li>命名采用英文单词或其组合，采用大小驼峰命名法，应直观可拼读，最好望文知义，切忌使用汉语拼音来命名</li><li>禁止使用连续的下划线（<code>variable_name</code> 与 <code>ariable__name</code> 很难区分）</li><li><p>通知常用于在模块间传递消息，所以通知要尽可能地表示出发生的事件，</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">通知的命名范式是：</div><div class="line"></div><div class="line">[ 触发通知的类名 ] + [Did | Will] + [ 动作 ] + Notification</div><div class="line">UIApplicationDidEnterBackgroundNotification</div><div class="line">UIApplicationWillEnterForegroundNotification</div></pre></td></tr></table></figure></li><li><p><code>if</code>条件语句只有一行代码，不得省略<code>{}</code>，只有当条件语句和执行代码一行时才能省略（参考运算第7点）</p></li><li><code>@public</code> 和 <code>@private</code> 标记符应该以一个空格来进行缩进</li><li>建议加载<code>xib</code>，<code>xib</code>名称用<code>NSStringFromClass()</code>，避免书写错误</li><li>使用第三方框架，尽量不要更改内部文件，而应该再次封装，个性定制</li><li>删除所有无用代码（不用的代码直接删除，而不是注释掉）</li><li>空白行不要留空格（代码review是会显示成红色）</li></ol><h3 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h3><ol><li>全部大写，单词间用 <code>_</code> 分隔 (<code>#define THIS_IS_AN_MACRO @&quot;THIS_IS_AN_MACRO&quot;</code>)</li><li>以字母 <code>k</code> 开头，后面遵循大驼峰命名 (<code>#define kWidth self.frame.size.width</code>)</li><li>不要使用 <code>#define</code> 宏来定义常量，因为如果使用宏定义, 一来宏可能被重定义. 二来引用不同的文件可能会导致宏的不同</li></ol><h3 id="运算相关"><a href="#运算相关" class="headerlink" title="运算相关"></a>运算相关</h3><ol><li>二元运算符和参数之间要有一个空格，如赋值号 <code>=</code> 左右各留一个空格</li><li>一元运算符和参数之间不放置空格，比如 <code>!</code>非运算符，<code>&amp;</code>按位与，<code>|</code>按位或</li><li>强制类型转换和参数之间不放置空格</li><li>浮点型变量不能用<code>==</code>或<code>！=</code>比较，无论是<code>float</code>类型还是<code>double</code>类型的变量，都有精度限制。<br> 所以一定要避免将浮点变量用<code>==</code>或<code>!=</code>与数字比较，应该转化成<code>&gt;=</code>或<code>&lt;=</code>形式</li><li><code>BOOL</code> 在 <code>Objective-C</code> 中被定义为 <code>signed char</code> 类型，这意味着一个 <code>BOOL</code> 类型的变量不仅仅可以表示 <code>YES(1)</code> 和 <code>NO(0)</code> 两个值，所以永远不要将 <code>BOOL</code> 类型变量直接和 <code>YES</code> 比较</li><li><p>判断<code>if</code>书写方式</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">//建议这样写</div><div class="line">if (indexPath.row == 0) return 44;</div><div class="line">if (indexPath.row == 1) return 80;</div><div class="line">if (indexPath.row == 2) return 50;</div><div class="line">return 44;</div><div class="line"></div><div class="line">//而不是</div><div class="line">if (indexPath.row == 0) &#123;</div><div class="line">return 44;</div><div class="line">&#125; else if (indexPath.row == 1) &#123;</div><div class="line">        return 80;</div><div class="line">&#125; else if (indexPath.row == 2) &#123;</div><div class="line">        return 50;</div><div class="line">&#125; else &#123;</div><div class="line">        return 44;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><ol><li><p>用<code>@[]</code>构建<code>NSArray</code>，用<code>@{}</code>构建<code>NSDictionary</code><br> 如果构造代码写在一行，需要在括号两端留有一个空格，使得被构造的元素于与构造语法区分开来</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 正确，在语法糖的 &quot;[]&quot; 或者 &quot;&#123;&#125;&quot; 两端留有空格</div><div class="line">NSArray *array = @[ [foo description], @&quot;Another String&quot;, [bar description] ];</div><div class="line">NSDictionary *dict = @&#123; NSForegroundColorAttributeName : [NSColor redColor] &#125;;</div><div class="line"></div><div class="line">// 不正确，不留有空格降低了可读性</div><div class="line">NSArray* array = @[[foo description], [bar description]];</div><div class="line">NSDictionary* dict = @&#123;NSForegroundColorAttributeName: [NSColor redColor]&#125;;</div></pre></td></tr></table></figure><p> 如果构造代码不写在一行内，构造元素需要使用两个空格来进行缩进，右括号 <code>]</code> 或者 <code>}</code> 写在新的一行，并且与调用语法糖那行代码的第一个非空字符对齐。<br> 构造字典时，字典的 <code>Key</code> 和 <code>Value</code> 与中间的冒号 <code>:</code> 都要留有一个空格，多行书写时，也可以将 <code>Value</code> 对齐</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//正确，冒号&apos;:&apos;前后留有一个空格</div><div class="line">NSDictionary *option1 = @&#123;</div><div class="line">NSFontAttributeName : [NSFont fontWithName:@&quot;Helvetica-Bold&quot; size:12],</div><div class="line">NSForegroundColorAttributeName : fontColor</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//正确，按照Value来对齐</div><div class="line">NSDictionary *option2 = @&#123;</div><div class="line">NSFontAttributeName :            [NSFont fontWithName:@&quot;Arial&quot; size:12],</div><div class="line">NSForegroundColorAttributeName : fontColor</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>使用带有 <code>@</code> 符号的语法糖来生成<code>NSNumber</code> 对象能使代码更简洁：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSNumber *fortyTwo = @42;</div><div class="line">NSNumber *piOverTwo = @(M_PI / 2);</div><div class="line">enum &#123;</div><div class="line">kMyEnum = 2;</div><div class="line">&#125;;</div><div class="line">NSNumber *myEnum = @(kMyEnum);</div></pre></td></tr></table></figure></li></ol><h2 id="三-变量相关："><a href="#三-变量相关：" class="headerlink" title="三.变量相关："></a>三.变量相关：</h2><ol><li>类属性，临时变量采用小驼峰命名（<code>firstName</code>）；</li><li>指针<code>*</code>的位置，挨着变量名（<code>NSString *varName</code>）</li><li>局部变量不要与全局变量重名</li><li>成员变量使用<code>_</code>作为前缀，（<code>NSDictionary *_userInfo</code>）</li><li><p>使用 <code>const</code> 定义浮点型或者单个的整数型常量，如果要定义一组相关的整数常量，应该优先使用枚举</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const CGFloat kTableViewCellHeight = 50.0f;</div><div class="line">const NSInteger kTableViewRows = 5;</div></pre></td></tr></table></figure></li><li><p>对于拥有<code>Mutable</code>子类型的对象(e.g. <code>NSString</code>, <code>NSArray</code>, <code>NSDictionary</code>)一定要定义成<code>copy</code>属性</p></li><li>如果是内部使用的属性, 那么就定义成私有的属性(定义到<code>.m</code>的<code>class extension</code>里面)</li><li>尽量不要暴露<code>mutable</code>类型的对象在<code>public interface</code>, 建议在<code>.h</code>定义一个<code>Inmutable</code>类型的属性, 然后在<code>.m</code>的<code>get</code>函数里面返回一个内部定义的<code>mutable</code>变量</li><li>尽量不要使用死值，死值每次修改的时候容易被遗忘，地方多了找起来就悲剧了。而且定义成枚举或者<code>static</code>可以让错误发生在编译阶段。另外仅仅看到一个数字，完全不知道这个数字代表的意义</li><li><p>如果声明的属性，只想使用的<code>get</code>方法，不使用<code>set</code>方法，并且不想让外界更改这个属性的值，那么建议在括号里面加<code>readonly</code></p></li><li><p>给属性命名时建议采用修饰+类型的方式。以免产生歧义，比如<code>title</code> (这个到底是个<code>NSString</code>还是<code>UILabel</code>?)。同样的，<code>label</code> 我知道你是个<code>UILabel</code>，但是我不知道它是用来做什么的呀？）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//正确的命名方式为</div><div class="line">titleLabel    //表示标题的label,  是UILabel类型</div><div class="line">confirmButton //表示确认的button, 是UIButton类型</div></pre></td></tr></table></figure></li><li><p>一个类的 <code>Delegate</code> 对象通常还引用着类本身，这样很容易造成引用循环的问题，所以类的 <code>Delegate</code> 属性要设置为弱引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, weak) id&lt;XXXX&gt; delegate;</div></pre></td></tr></table></figure></li><li><p>如果属性是<code>BOOL</code>类型，建议在括号中重写<code>get</code>方法名称，以提高可读性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property(nonatomic,readonly,getter=isKeyWindow) BOOL keyWindow;</div></pre></td></tr></table></figure></li></ol><h2 id="四-函数相关："><a href="#四-函数相关：" class="headerlink" title="四.函数相关："></a>四.函数相关：</h2><ol><li>不要使用 <code>new</code> 方法创建对象</li><li>在每个方法的定义前留白一行，也就是在方法和方法之间留空一行</li><li>避免函数有太多的参数，这样容易把参数顺序搞错，调用不方便，若较多，可把参数定义成一个结构体，把结构体的指针当成参数传入</li><li>参数过多时，每个参数占用一行，以冒号对齐</li><li>函数长度不要超过50行，小函数比大函数可读性更强。函数的参数不宜过多，零元函数最好，一元函数也不错，高于三元的函数需重构</li><li><code>{</code>可写在方法末尾（加空格），也可另起一行</li><li>私有方法在方法名前加<code>p_</code></li><li>使用 <code>#pragma mark -</code> 方式对类的方法进行分组</li><li><code>dealloc</code>函数放在最前面</li><li>保持公共<code>API</code>的简洁性</li><li>不要用点分语法来调用方法，只用来访问属性。这样是为了防止代码可读性问题</li><li>函数调用的格式和声明格式一样。</li><li><p>如果方法是为了获取对象的一个属性值，直接用属性名称来命名这个方法，注意不要添加<code>get</code>或者其他的动词前缀<br>为什么 <code>Objective-C</code> 中不适用 <code>get</code> 前缀来表示属性获取方法？因为 <code>get</code> 在 <code>Objective-C</code> 中通常只用来表示从函数指针返回值的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 三个参数都是作为函数的返回值来使用的，这样的函数名可以使用 &quot;get&quot; 前缀</div><div class="line">- (void)getLineDash:(float *)pattern count:(int *)count phase:(float *)phase;</div></pre></td></tr></table></figure></li><li><p>函数命名原则（遵循<code>Apple</code>风格）：小驼峰，尽量清晰明了，采用单词全拼，冒号对齐；尽量做到不需要注释也能了解其作用<br><code>-</code> 和 <code>(void)</code> 之间加空格，方法名和第一个参数之间不留空格，参数之前的关键字要明确(<code>middleName</code>,<code>lastName</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)saveMyFirstName:(NSString *)firstName</div><div class="line">             middleName:(NSString *)middleName</div><div class="line">          lastName:(NSString *)lastName;</div></pre></td></tr></table></figure></li><li><p>m文件函数实现：第一个大括号换行,其他使用场景(<code>if</code> <code>while</code> <code>else</code>)等左括号跟在第一行后面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)saveMyFirstName:(NSString *)firstName</div><div class="line">     middleName:(NSString *)middleName</div><div class="line">       lastName:(NSString *)lastName</div><div class="line">&#123;</div><div class="line">while (1) &#123;</div><div class="line">     </div><div class="line">&#125;</div><div class="line">if (1) &#123;</div><div class="line"></div><div class="line">&#125; else &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>黄金路径，使用条件语句时，左手的代码应该是”golden” 或 “happy”路径。也就是不要嵌套<code>if</code>语句，多个返回语句也是OK。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//应该：</div><div class="line">- (void)someMethod &#123;</div><div class="line">if (![someOther boolValue]) &#123;</div><div class="line">return;</div><div class="line">&#125;</div><div class="line">//Do something important</div><div class="line">&#125;</div><div class="line"></div><div class="line">//不应该：</div><div class="line">- (void)someMethod &#123;</div><div class="line">if ([someOther boolValue]) &#123;</div><div class="line">//Do something important</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在继承中，凡是要求子类重写父类的方法必须先调用父类的这个方法进行初始化操作;<br>建议:父类的方法名后面加上 <code>NS_REQUIRES_SUPER</code> ; 子类重写这个方法就会自动警告提示要调用这个 <code>super</code> 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 注意:父类中的方法加`NS_REQUIRES_SUPER`,子类重写才有警告提示</div><div class="line">- (void)prepare NS_REQUIRES_SUPER;</div></pre></td></tr></table></figure></li></ol><h2 id="五-UI布局相关："><a href="#五-UI布局相关：" class="headerlink" title="五. UI布局相关："></a>五. UI布局相关：</h2><ol><li>尽量使用<code>Storyboard</code> + 自动布局</li><li>代码布局时尽量使用相对布局，比如使用子<code>View</code>在父<code>View</code>中的相对位置</li><li>与主题颜色相关的控件添加引用在代码中设置，方便同意替换主题色</li></ol><h2 id="六-类，协议相关："><a href="#六-类，协议相关：" class="headerlink" title="六. 类，协议相关："></a>六. 类，协议相关：</h2><ol><li>类采用前缀加大驼峰命名规则（<code>SSCPersonViewController</code>）;</li><li>协议加<code>delegate</code>或其他比较明确能看出是协议的后缀（<code>delegate</code>，<code>protocol</code>，<code>DataSource</code>等）</li><li>协议中的方法遵循<code>Apple</code>系统风格，参考（<code>UITableViewDelegate</code>，<code>UITableViewDataSource</code>的函数风格）</li><li>对外暴露的接口和属性放头文件，不暴露的放在<code>m</code>文件；</li><li>给分类扩充方法，建议加上前缀，同理跟分类添加属性（利用运行时），建议加前缀</li><li><p>一个委托方法的第一个参数是触发它的对象，第一个关键词是触发对象的类名，除非委托方法只有一个名为 <code>sender</code> 的参数：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 第一个关键词为触发委托的类名</div><div class="line">- (BOOL)tableView:(NSTableView *)tableView shouldSelectRow:(int)row;</div><div class="line">- (BOOL)application:(NSApplication *)sender openFile:(NSString *)filename;</div><div class="line"></div><div class="line">// 当只有一个 &quot;sender&quot; 参数时可以省略类名</div><div class="line">- (BOOL)applicationOpenUntitledFile:(NSApplication *)sender;</div><div class="line"></div><div class="line">//根据委托方法触发的时机和目的，使用 should,will,did 等关键词</div><div class="line">- (void)browserDidScroll:(NSBrowser *)sender;</div><div class="line">- (NSUndoManager *)windowWillReturnUndoManager:(NSWindow *)window; 、</div><div class="line">- (BOOL)windowShouldClose:(id)sender;</div></pre></td></tr></table></figure></li><li><p>类型标识符、代理名称、尖括号间不留空格，该规则同样适用于<code>delegate</code>申明</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt;</div><div class="line">@end</div></pre></td></tr></table></figure></li><li><p>如果类申明中包含多个    protocal    ，每个    protocal`占用一行，缩进 4 个字符</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@interface SSCOrderViewController ()&lt;</div><div class="line">UITableViewDelegate,</div><div class="line">UITableViewDataSource,</div><div class="line">SSCOrderEstimateCellDelegate</div><div class="line">&gt; &#123;</div><div class="line">…</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="七-Block："><a href="#七-Block：" class="headerlink" title="七. Block："></a>七. Block：</h2><ol><li>注意必要时使用<code>WEAKSELF</code>和<code>STRONGSELF</code>，避免造成循环引用，以及野指针（常见于访问实例变量，<code>NSTimer</code>等场景）</li><li>较短的 <code>block</code> 可以写在一行内。</li><li>如果分行显示的话， <code>block</code> 的右括号 <code>}</code> 应该和调用 <code>block</code> 那行代码的第一个非空字符对齐。</li><li><code>block</code> 内的代码采用 4 个空格 的缩进。</li><li>如果 <code>block</code> 过于庞大，应该单独声明成一个变量来使用。</li><li><p><code>^</code> 和 <code>(</code> 之间， <code>^</code> 和 <code>{</code> 之间都没有空格，参数列表的右括号 <code>)</code> 和 <code>{</code> 之间有一个空格</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">// 较短的 block 写在一行内</div><div class="line">[operation setCompletionBlock:^&#123; [self onOperationDone]; &#125;];</div><div class="line"></div><div class="line">// 分行书写的 block ，内部使用 4 空格缩进</div><div class="line">[operation setCompletionBlock:^&#123;</div><div class="line">[self.delegate newDataAvailable];</div><div class="line">&#125;];</div><div class="line"></div><div class="line">// 使用 C 语言 API 调用的 block 遵循同样的书写规则</div><div class="line">dispatch_async(_fileIOQueue, ^&#123;</div><div class="line">NSString* path = [self sessionFilePath];</div><div class="line">if (path) &#123;</div><div class="line">// ...</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 较长的 block 关键字可以缩进后在新行书写，注意 block 的右括号 &apos;&#125;&apos; 和调用 block 那行代码的第一个非空字符对齐</div><div class="line">[[SessionService sharedService]</div><div class="line">loadWindowWithCompletionBlock:^(SessionWindow *window) &#123;</div><div class="line">if (window) &#123;</div><div class="line">[self windowDidLoad:window];</div><div class="line">&#125; else &#123;</div><div class="line">[self errorLoadingWindow];</div><div class="line">&#125;</div><div class="line">&#125;];</div><div class="line"></div><div class="line">// 较长的 block 参数列表同样可以缩进后在新行书写</div><div class="line">[[SessionService sharedService]</div><div class="line">loadWindowWithCompletionBlock:</div><div class="line">^(SessionWindow *window) &#123;</div><div class="line">if (window) &#123;</div><div class="line">[self windowDidLoad:window];</div><div class="line">&#125; else &#123;</div><div class="line">[self errorLoadingWindow];</div><div class="line">&#125;</div><div class="line">&#125;];</div><div class="line"></div><div class="line">// 庞大的 block 应该单独定义成变量使用</div><div class="line">void (^largeBlock)(void) = ^&#123;</div><div class="line">// ...</div><div class="line">&#125;;</div><div class="line">[_operationQueue addOperationWithBlock:largeBlock];</div><div class="line"></div><div class="line">// 在一个调用中使用多个 block ，注意到他们不是像函数那样通过 &apos;:&apos; 对齐的，而是同时进行了 4 个空格的缩进</div><div class="line">[myObject doSomethingWith:arg1</div><div class="line">firstBlock:^(Foo *a) &#123;</div><div class="line">// ...</div><div class="line">&#125;</div><div class="line">secondBlock:^(Bar *b) &#123;</div><div class="line">// ...</div><div class="line">&#125;];</div></pre></td></tr></table></figure></li></ol><h2 id="八-单词简写"><a href="#八-单词简写" class="headerlink" title="八. 单词简写"></a>八. 单词简写</h2><p>不要使用单词的简写，拼写出完整的单词：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 清晰</div><div class="line">destinationSelection</div><div class="line">setBackgroundColor:</div><div class="line">// 不清晰，不要使用简写</div><div class="line">destSel</div><div class="line">setBkgdColor:</div></pre></td></tr></table></figure><p>然而，有部分单词简写在 <code>Objective-C</code> 编码过程中是非常常用的，以至于成为了一种规范，这些简写可以在代码中直接使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">alloc == Allocate</div><div class="line">max == Maximum</div><div class="line">alt == Alternate</div><div class="line">min == Minimum</div><div class="line">app == Application</div><div class="line">msg == Message</div><div class="line">calc == Calculate</div><div class="line">nib == Interface Builder archive</div><div class="line">dealloc == Deallocate</div><div class="line">pboard == Pasteboard</div><div class="line">func == Function</div><div class="line">rect == Rectangle</div><div class="line">horiz == Horizontal</div><div class="line">Rep == Representation (used in class name such as NSBitmapImageRep).</div><div class="line">info == Information</div><div class="line">temp == Temporary</div><div class="line">init == Initialize</div><div class="line">vert == Vertical</div><div class="line">int == Integer</div><div class="line">btn == button</div><div class="line">txf == textField</div><div class="line">dict == dictionary</div></pre></td></tr></table></figure><h2 id="九-注释"><a href="#九-注释" class="headerlink" title="九. 注释"></a>九. 注释</h2><ol><li>方法头部应进行注释，列出：函数的功能、输入参数、输出参数、返回值、修改信息等</li><li>全局变量要有详细的注释，包括对其功能、取值范围等说明</li><li>定义在头文件里的接口方法、属性必须要有注释</li><li><p>每个文件都必须写文件注释，文件注释通常包含：文件所在模块、作者信息、历史版本信息、版权信息、文件包含的内容，作用</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">一段良好文件注释的栗子：</div><div class="line"></div><div class="line">/*******************************************************************************</div><div class="line">Copyright (C), 2011-2013, Andrew Min Chang</div><div class="line">File name: AMCCommonLib.h</div><div class="line">Author: Andrew Chang (Zhang Min)</div><div class="line">E-mail: LaplaceZhang@126.com</div><div class="line">Description:</div><div class="line">This file provide some covenient tool in calling library tools. One can easily include</div><div class="line">library headers he wants by declaring the corresponding macros.</div><div class="line">I hope this file is not only a header, but also a useful Linux library note.</div><div class="line">History:</div><div class="line">2012-??-??: On about come date around middle of Year 2012, file created as &quot;commonLib.h&quot;</div><div class="line">2012-08-20: Add shared memory library; add message queue.</div><div class="line">2012-08-21: Add socket library (local)</div><div class="line">2012-08-22: Add math library</div><div class="line">2012-08-23: Add socket library (internet)</div><div class="line">2012-08-24: Add daemon function</div><div class="line">2012-10-10: Change file name as &quot;AMCCommonLib.h&quot;</div><div class="line">2012-12-04: Add UDP support in AMC socket library</div><div class="line">2013-01-07: Add basic data type such as &quot;sint8_t&quot;</div><div class="line">2013-01-18: Add CFG_LIB_STR_NUM.</div><div class="line">2013-01-22: Add CFG_LIB_TIMER.</div><div class="line">2013-01-22: Remove CFG_LIB_DATA_TYPE because there is already AMCDataTypes.h</div><div class="line">Copyright information:</div><div class="line">This file was intended to be under GPL protocol. However, I may use this library</div><div class="line">in my work as I am an employee. And my company may require me to keep it secret.</div><div class="line">Therefore, this file is neither open source nor under GPL control.</div><div class="line">********************************************************************************/</div></pre></td></tr></table></figure></li><li><p>方法、函数、类、协议、类别的定义都需要注释，推荐采用Apple的标准注释风格，<br> 好处是可以在引用的地方<code>alt+点击</code>查看注释，非常方便</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">一些良好的注释：</div><div class="line"></div><div class="line">objective-c</div><div class="line">/**</div><div class="line"> *  Create a new preconnector to replace the old one with given mac address.</div><div class="line"> *  NOTICE: We DO NOT stop the old preconnector, so handle it by yourself.</div><div class="line"> *</div><div class="line"> *  @param type       Connect type the preconnector use.</div><div class="line"> *  @param macAddress Preconnector&apos;s mac address.</div><div class="line"> */</div><div class="line">- (void)refreshConnectorWithConnectType:(IPCConnectType)type  Mac:(NSString *)macAddress;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  Stop current preconnecting when application is going to background.</div><div class="line"> */</div><div class="line">-(void)stopRunning;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  Get the COPY of cloud device with a given mac address.</div><div class="line"> *</div><div class="line"> *  @param macAddress Mac address of the device.</div><div class="line"> *</div><div class="line"> *  @return Instance of IPCCloudDevice.</div><div class="line"> */</div><div class="line">-(IPCCloudDevice *)getCloudDeviceWithMac:(NSString *)macAddress;</div><div class="line"></div><div class="line">// A delegate for NSApplication to handle notifications about app</div><div class="line">// launch and shutdown. Owned by the main app controller.</div><div class="line">@interface MyAppDelegate : NSObject &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></li><li><p>协议、委托的注释要明确说明其被触发的条件：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/** Delegate - Sent when failed to init connection, like p2p failed. */</div><div class="line">-(void)initConnectionDidFailed:(IPCConnectHandler *)handler;</div></pre></td></tr></table></figure></li><li><p>如果在注释中要引用参数名或者方法函数名，使用 <code>||</code> 将参数或者方法括起来以避免歧义：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">objective-c</div><div class="line">// Sometimes we need |count| to be less than zero.</div><div class="line">// Remember to call |StringWithoutSpaces(&quot;foo bar baz&quot;)|</div></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/06/02/hello-world/"/>
      <url>/2017/06/02/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是XXX。欢迎来到我的个人技术博客。</p><p>这里用markdown写下你的简介，就跟平时写md一样就可以了。</p>]]></content>
    </entry>
    
    <entry>
      <title>读书</title>
      <link href="/reading/index.html"/>
      <url>/reading/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
